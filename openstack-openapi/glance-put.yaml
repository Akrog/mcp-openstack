openapi: 3.1.0
info:
  title: OpenStack Image API
  description: Image API provided by Glance service
  version: '2.16'
paths:
  /v2/metadefs/namespaces/{namespace_name}:
    parameters:
    - $ref: '#/components/parameters/metadefs_namespaces_namespace_name'
    put:
      operationId: metadefs/namespaces/namespace_name:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadefsNamespaceUpdateRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadefsNamespaceUpdateResponse'
      tags:
      - metadata-definition-namespaces
  /v2/metadefs/namespaces/{namespace_name}/properties/{property_name}:
    parameters:
    - $ref: '#/components/parameters/metadefs_namespaces_properties_namespace_name'
    - $ref: '#/components/parameters/metadefs_namespaces_properties_property_name'
    put:
      operationId: metadefs/namespaces/namespace_name/properties/property_name:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadefsNamespacesPropertyUpdateRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadefsNamespacesPropertyUpdateResponse'
      tags:
      - metadata-definition-properties
  /v2/metadefs/namespaces/{namespace_name}/objects/{object_name}:
    parameters:
    - $ref: '#/components/parameters/metadefs_namespaces_objects_namespace_name'
    - $ref: '#/components/parameters/metadefs_namespaces_objects_object_name'
    put:
      operationId: metadefs/namespaces/namespace_name/objects/object_name:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadefsNamespacesObjectUpdateRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadefsNamespacesObjectUpdateResponse'
      tags:
      - metadata-definition-objects
  /v2/metadefs/namespaces/{namespace_name}/tags/{tag_name}:
    parameters:
    - $ref: '#/components/parameters/metadefs_namespaces_tags_namespace_name'
    - $ref: '#/components/parameters/metadefs_namespaces_tags_tag_name'
    put:
      operationId: metadefs/namespaces/namespace_name/tags/tag_name:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadefsNamespacesTagUpdateRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadefsNamespacesTagUpdateResponse'
      tags:
      - metadata-definition-tags
  /v2/images/{image_id}/file:
    parameters:
    - $ref: '#/components/parameters/images_file_image_id'
    put:
      parameters:
      - $ref: '#/components/parameters/content-type'
      - $ref: '#/components/parameters/x-image-meta-store'
      description: 'Uploads binary image data.

        *(Since Image API v2.0)*


        Set the `Content-Type` request header to `application/octet-stream`.


        A multiple store backend support is introduced in the Rocky release

        as a part of the EXPERIMENTAL Image API v2.8.


        Beginning with API version 2.8, an optional `X-Image-Meta-Store`

        header may be added to the request. When present, the image data will be

        placed into the backing store whose identifier is the value of this

        header. If the store identifier specified is not recognized, a 400 (Bad

        Request) response is returned. When the header is not present, the image

        data is placed into the default backing store.


        Example call:


        **Preconditions**


        Before you can store binary image data, you must meet the following

        preconditions:


        **Synchronous Postconditions**


        **Troubleshooting**


        Normal response codes: 204


        Error response codes: 400, 401, 403, 404, 409, 410, 413, 415, 503'
      operationId: images/image_id/file:put
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ImagesFileUploadRequest'
      responses:
        '204':
          description: Ok
      tags:
      - images
      summary: Upload binary image data
  /v2/images/{image_id}/stage:
    parameters:
    - $ref: '#/components/parameters/images_stage_image_id'
    put:
      description: 'Places the binary image data in a staging area. It is not stored
        in

        the storage backend and is not accessible for download until after

        the [Image Import](#image-import-call) call is made.

        *(Since Image API v2.6)*


        Set the `Content-Type` request header to `application/octet-stream`.


        Example call:


        **Preconditions**


        Before you can stage binary image data, you must meet the following

        preconditions:


        **Synchronous Postconditions**


        **Troubleshooting**


        Normal response codes: 204


        Error response codes: 400, 401, 403, 404, 405, 409, 410, 413, 415, 503


        If the image import process is not enabled in your cloud, this request

        will result in a 404 response code with an appropriate message.'
      operationId: images/image_id/stage:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagesStageStageRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesStageResponse'
      tags:
      - images
      summary: Stage binary image data
  /v2/images/{image_id}/tags/{tag_value}:
    parameters:
    - $ref: '#/components/parameters/images_tags_image_id'
    - $ref: '#/components/parameters/images_tags_tag_value'
    put:
      operationId: images/image_id/tags/tag_value:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagesTagUpdateRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesTagUpdateResponse'
      tags:
      - images
  /v2/images/{image_id}/members/{member_id}:
    parameters:
    - $ref: '#/components/parameters/images_members_image_id'
    - $ref: '#/components/parameters/images_members_member_id'
    put:
      description: 'Sets the status for an image member.

        *(Since Image API v2.1)*


        This call allows an image member to change his or her *member status*.


        When an image is shared with you, you have immediate access to the image.
        What

        updating your member status on the image does for you is that it affects

        whether the image will appear in your image list response.


        For a more detailed discussion of image sharing, please consult [Image API
        v2

        Sharing](http://specs.openstack.org/openstack/glance-specs/specs/api/v2/sharing-image-api-v2.html).


        Preconditions


        Synchronous Postconditions


        Normal response codes: 200


        Error response codes: 400, 401, 404, 403'
      operationId: images/image_id/members/member_id:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagesMemberUpdateRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesMemberUpdateResponse'
      tags:
      - images
      summary: Update image member
  /v2/cache/{image_id}:
    parameters:
    - $ref: '#/components/parameters/cache_image_id'
    put:
      description: 'Queues image for caching.

        *(Since Image API v2.14)*


        Normal response codes: 202


        Error response codes: 400, 401, 403, 404'
      operationId: cache/image_id:put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CacheQueue_Image_From_ApiRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheQueue_Image_From_ApiResponse'
      tags:
      - cache
      summary: Queue image
components:
  schemas:
    MetadefsNamespaceUpdateResponse:
      type: object
      properties:
        namespace:
          type: string
          description: The unique namespace text.
          maxLength: 80
        display_name:
          type: string
          description: The user friendly name for the namespace. Used by UI if available.
          maxLength: 80
        description:
          type: string
          description: Provides a user friendly description of the namespace.
          maxLength: 500
        visibility:
          type: string
          description: Scope of namespace accessibility.
          enum:
          - public
          - private
        protected:
          type: boolean
          description: If true, namespace will not be deletable.
        owner:
          type: string
          description: Owner of the namespace.
          maxLength: 255
        created_at:
          type: string
          readOnly: true
          description: Date and time of namespace creation
          format: date-time
        updated_at:
          type: string
          readOnly: true
          description: Date and time of the last namespace modification
          format: date-time
        schema:
          readOnly: true
          type: string
        self:
          readOnly: true
          type: string
        resource_type_associations:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              prefix:
                type: string
              properties_target:
                type: string
        properties:
          type: object
          additionalProperties: true
        objects:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              required:
                type: array
                items:
                  type: string
                uniqueItems: true
              properties:
                type: object
                additionalProperties: true
        tags:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
      additionalProperties: false
      required:
      - namespace
    MetadefsNamespaceUpdateRequest:
      type: object
      properties:
        namespace:
          type: string
          description: The unique namespace text.
          maxLength: 80
        display_name:
          type: string
          description: The user friendly name for the namespace. Used by UI if available.
          maxLength: 80
        description:
          type: string
          description: Provides a user friendly description of the namespace.
          maxLength: 500
        visibility:
          type: string
          description: Scope of namespace accessibility.
          enum:
          - public
          - private
        protected:
          type: boolean
          description: If true, namespace will not be deletable.
        owner:
          type: string
          description: Owner of the namespace.
          maxLength: 255
        created_at:
          type: string
          readOnly: true
          description: Date and time of namespace creation
          format: date-time
        updated_at:
          type: string
          readOnly: true
          description: Date and time of the last namespace modification
          format: date-time
        schema:
          readOnly: true
          type: string
        self:
          readOnly: true
          type: string
        resource_type_associations:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              prefix:
                type: string
              properties_target:
                type: string
        properties:
          type: object
          additionalProperties: true
        objects:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              required:
                type: array
                items:
                  type: string
                uniqueItems: true
              properties:
                type: object
                additionalProperties: true
        tags:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
      additionalProperties: false
      required:
      - namespace
    MetadefsNamespacesPropertyUpdateResponse:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
        title:
          type: string
        description:
          type: string
        operators:
          type: array
          items:
            type: string
        type:
          type: string
          enum:
          - array
          - boolean
          - integer
          - number
          - object
          - string
          - null
        required:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
        minimum:
          type: number
        maximum:
          type: number
        maxLength:
          type: integer
          minimum: 0
        minLength:
          allOf:
          - type: integer
            minimum: 0
          - default: 0
        pattern:
          type: string
          format: regex
        enum:
          type: array
        readonly:
          type: boolean
        default: {}
        items:
          type: object
          properties:
            type:
              type: string
              enum:
              - array
              - boolean
              - integer
              - number
              - object
              - string
              - null
            enum:
              type: array
        maxItems:
          type: integer
          minimum: 0
        minItems:
          allOf:
          - type: integer
            minimum: 0
          - default: 0
        uniqueItems:
          type: boolean
          default: false
        additionalItems:
          type: boolean
      additionalProperties: false
      required:
      - type
      - title
      - name
    MetadefsNamespacesPropertyUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
        title:
          type: string
        description:
          type: string
        operators:
          type: array
          items:
            type: string
        type:
          type: string
          enum:
          - array
          - boolean
          - integer
          - number
          - object
          - string
          - null
        required:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
        minimum:
          type: number
        maximum:
          type: number
        maxLength:
          type: integer
          minimum: 0
        minLength:
          allOf:
          - type: integer
            minimum: 0
          - default: 0
        pattern:
          type: string
          format: regex
        enum:
          type: array
        readonly:
          type: boolean
        default: {}
        items:
          type: object
          properties:
            type:
              type: string
              enum:
              - array
              - boolean
              - integer
              - number
              - object
              - string
              - null
            enum:
              type: array
        maxItems:
          type: integer
          minimum: 0
        minItems:
          allOf:
          - type: integer
            minimum: 0
          - default: 0
        uniqueItems:
          type: boolean
          default: false
        additionalItems:
          type: boolean
      additionalProperties: false
      required:
      - type
      - title
      - name
    MetadefsNamespacesObjectUpdateResponse:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
        description:
          type: string
        required:
          type: array
          items:
            type: string
          uniqueItems: true
        properties:
          type: object
          additionalProperties: true
        schema:
          readOnly: true
          type: string
        self:
          readOnly: true
          type: string
        created_at:
          type: string
          readOnly: true
          description: Date and time of object creation
          format: date-time
        updated_at:
          type: string
          readOnly: true
          description: Date and time of the last object modification
          format: date-time
      additionalProperties: false
      required:
      - name
    MetadefsNamespacesObjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
        description:
          type: string
        required:
          type: array
          items:
            type: string
          uniqueItems: true
        properties:
          type: object
          additionalProperties: true
        schema:
          readOnly: true
          type: string
        self:
          readOnly: true
          type: string
        created_at:
          type: string
          readOnly: true
          description: Date and time of object creation
          format: date-time
        updated_at:
          type: string
          readOnly: true
          description: Date and time of the last object modification
          format: date-time
      additionalProperties: false
      required:
      - name
    MetadefsNamespacesTagUpdateResponse:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
        created_at:
          type: string
          readOnly: true
          description: Date and time of tag creation
          format: date-time
        updated_at:
          type: string
          readOnly: true
          description: Date and time of the last tag modification
          format: date-time
      additionalProperties: false
      required:
      - name
    MetadefsNamespacesTagUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
        created_at:
          type: string
          readOnly: true
          description: Date and time of tag creation
          format: date-time
        updated_at:
          type: string
          readOnly: true
          description: Date and time of the last tag modification
          format: date-time
      additionalProperties: false
      required:
      - name
    ImagesFileUploadRequest:
      type: string
      format: binary
    ImagesStageResponse:
      type: object
      description: Response of the images/image_id/stage:put operation
    ImagesStageStageRequest:
      type: object
      description: Request of the images/image_id/stage:put operation
    ImagesTagUpdateResponse:
      type: object
      description: Response of the images/image_id/tags/tag_value:put operation
    ImagesTagUpdateRequest:
      type: object
      description: Request of the images/image_id/tags/tag_value:put operation
    ImagesMemberUpdateResponse:
      type: object
      properties:
        member_id:
          type: string
          description: "The ID of the image member. An image member is usually a project\
            \ (also\ncalled the \u201Ctenant\u201D) with whom the image is shared."
        image_id:
          type: string
          description: The UUID of the image.
          pattern: ^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$
        created_at:
          type: string
          description: "The date and time when the resource was created.\n\nThe date\
            \ and time stamp format is [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601):\n\
            \n```\nCCYY-MM-DDThh:mm:ss\xB1hh:mm\n\n```\n\nFor example, `2015-08-27T09:49:58-05:00`.\n\
            \nThe `\xB1hh:mm` value, if included, is the time zone as an offset\n\
            from UTC."
        updated_at:
          type: string
          description: "The date and time when the resource was updated.\n\nThe date\
            \ and time stamp format is [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601):\n\
            \n```\nCCYY-MM-DDThh:mm:ss\xB1hh:mm\n\n```\n\nFor example, `2015-08-27T09:49:58-05:00`.\n\
            \nThe `\xB1hh:mm` value, if included, is the time zone as an offset\n\
            from UTC. In the previous example, the offset value is `-05:00`.\n\nIf\
            \ the `updated_at` date and time stamp is not set, its value is\n`null`."
        status:
          type: string
          description: 'The status of this image member. Value is one of `pending`,

            `accepted`, `rejected`.'
          enum:
          - pending
          - accepted
          - rejected
        schema:
          readOnly: true
          type: string
          description: The URL for the schema describing an image member.
      additionalProperties: false
    ImagesMemberUpdateRequest:
      type: object
      description: Request of the images/image_id/members/member_id:put operation
    CacheQueue_Image_From_ApiResponse:
      type: object
      description: Response of the cache/image_id:put operation
    CacheQueue_Image_From_ApiRequest:
      type: object
      description: Request of the cache/image_id:put operation
  parameters:
    metadefs_namespaces_namespace_name:
      in: path
      name: namespace_name
      description: namespace_name parameter for /v2/metadefs/namespaces/{namespace_name}
        API
      schema:
        type: string
      required: true
    metadefs_namespaces_properties_namespace_name:
      in: path
      name: namespace_name
      description: namespace_name parameter for /v2/metadefs/namespaces/{namespace_name}/properties/{property_name}
        API
      schema:
        type: string
      required: true
    metadefs_namespaces_properties_property_name:
      in: path
      name: property_name
      description: property_name parameter for /v2/metadefs/namespaces/{namespace_name}/properties/{property_name}
        API
      schema:
        type: string
      required: true
    metadefs_namespaces_objects_namespace_name:
      in: path
      name: namespace_name
      description: namespace_name parameter for /v2/metadefs/namespaces/{namespace_name}/objects/{object_name}
        API
      schema:
        type: string
      required: true
    metadefs_namespaces_objects_object_name:
      in: path
      name: object_name
      description: object_name parameter for /v2/metadefs/namespaces/{namespace_name}/objects/{object_name}
        API
      schema:
        type: string
      required: true
    metadefs_namespaces_tags_namespace_name:
      in: path
      name: namespace_name
      description: namespace_name parameter for /v2/metadefs/namespaces/{namespace_name}/tags/{tag_name}
        API
      schema:
        type: string
      required: true
    metadefs_namespaces_tags_tag_name:
      in: path
      name: tag_name
      description: tag_name parameter for /v2/metadefs/namespaces/{namespace_name}/tags/{tag_name}
        API
      schema:
        type: string
      required: true
    images_file_image_id:
      in: path
      name: image_id
      description: image_id parameter for /v2/images/{image_id}/file API
      schema:
        type: string
      required: true
    content-type:
      in: header
      name: Content-Type
      description: The media type descriptor of the body, namely application/octet-stream
      schema:
        type: string
    x-image-meta-store:
      in: header
      name: X-Image-Meta-Store
      description: A store identifier to upload or import image data. Should only
        be included when making a request to a cloud that supports multiple backing
        stores. Use the Store Discovery call to determine an appropriate store identifier.
        Simply omit this header to use the default store.
      schema:
        type: string
    images_stage_image_id:
      in: path
      name: image_id
      description: image_id parameter for /v2/images/{image_id}/stage API
      schema:
        type: string
      required: true
    images_tags_image_id:
      in: path
      name: image_id
      description: image_id parameter for /v2/images/{image_id}/tags/{tag_value} API
      schema:
        type: string
      required: true
    images_tags_tag_value:
      in: path
      name: tag_value
      description: tag_value parameter for /v2/images/{image_id}/tags/{tag_value}
        API
      schema:
        type: string
      required: true
    images_members_image_id:
      in: path
      name: image_id
      description: image_id parameter for /v2/images/{image_id}/members/{member_id}
        API
      schema:
        type: string
      required: true
    images_members_member_id:
      in: path
      name: member_id
      description: member_id parameter for /v2/images/{image_id}/members/{member_id}
        API
      schema:
        type: string
      required: true
    cache_image_id:
      in: path
      name: image_id
      description: image_id parameter for /v2/cache/{image_id} API
      schema:
        type: string
      required: true
